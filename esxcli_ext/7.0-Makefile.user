
DEV_VIB_BASENAME ?= $(BULL_VENDOR_CODE)-ESX-$(UWTOOL)-$(UWTOOL_VERSION)

DESC_NAME=$(shell echo $(BULL_VENDOR_CODE)-ESX-$(UWTOOL) | tr A-Z a-z)
DESC_ESX_VERSION=7.0.0

################################################################
# Set build configuration options here.
#
# Variables starting with "DEV_" are reserved for communicating
# build parameters into the core makefiles (in .../samples/common).
#
# Those starting with "VMW_" are reserved for VMware use, and should
# be considered unsupported with no compatibility guarantees unless
# explicitly documented otherwise.
#
# Note that many variables do not currently follow the above
# patterns.  This is to minimize changes required in existing
# partner code.

################
# First, define the end environment(s) with the following two
# variables.  As shown here, one is defined.  If more than one is
# necessary, these values will need to be set on a per-target basis,
# or in a loop that recursively invokes make with each set of values
# provided on the command line.
#
# This parameter must be set.

# Legal values for DEV_TARGET_CONTEXT are "vmkernel" or "uw".
DEV_TARGET_CONTEXT = uw

################
# This controls which class of compiler options to use.  Allowed
# values are "beta" (for debugging) and "release".  The default is
# the type of the ESX build that produced this devkit.
DEV_OBJDIR = beta

################
# Typically, it won't be necessary to modify this setting, but the
# substitutions pattern may need to put the intermediate files in a
# more convenient location.
DEV_$(DEV_OBJDIR)_OBJECTS = $(UWTOOL_SOURCES:%.c=$(BINARIES_DIR)/%.o)

################
# If creating a standalone userworld application, as opposed to a
# shared object that gets loaded by some other program, uncomment
# the following assignment.  The value needs to be empty or non-
# empty.  If the latter, any content may be used.
DEV_APP = 1

################
# Extra compiler and preprocessor flags based on kind of build
# (release or beta).  These default to being empty.
DEV_beta_COMPILEFLAGS = -DSF_JLIB_DEBUG
# DEV_release_COMPILEFLAGS = -Dmy_optimized_flag

################
# Define here any additional libraries required by uncommenting the
# appropriate variable(s) and modifying as needed.  If the library is
# not included in the devkit distribution, include a -L /some/path
# parameter before the -lname parameter so that the linker can find
# it.  The *PRE* variables are included as the first library
# directives.  The *POST* variables are included as the last library
# directives.
#
# The default values are empty.

# DEV_release_PRE_LIBS =
# DEV_beta_PRE_LIBS =

# The third assignment below is semantically equivalent to the first
# two assignments.

# DEV_release_POST_LIBS = -lm
# DEV_beta_POST_LIBS = -lm
# or
# DEV_$(DEV_OBJDIR)_POST_LIBS = -lm

################
# If the vdsPublic library needs to be included in the compilation,
# uncomment the following assignment.  Currently, that library only
# comes as part of the "kmdk-devtools-vds" devkit, so it and any
# other devkit components it depends on will need to be installed
# on the same development host as this devkit.  The value must be
# empty for not needing vdsPublic, and non-empty for needing it.
# The actual content is not examined.

# DEV_NEEDVDSLIB = 1

################
# Request that the management library be included when we link.  This
# has to be explicitly done here because we're hooking into the base
# HExDK's build system, and it doesn't do that inclusion by default.

DEV_NEED_VMKMGMT = 1

################################################################
# Nothing beyond this point should require modification.

HEXDK_BASE = $(shell /bin/rpm -q --qf '%{instprefixes}\n' vmware-esx-hexdk-devtools-7.0.0-1.0.15525992)
VMW_DRIVER_DEVKIT_BASE := $(shell /bin/rpm -q --qf '%{instprefixes}\n' vmware-esx-nativeddk-devtools-7.0.0-1.0.15525992)

VMKAPI_LOCATION = $(VMW_DRIVER_DEVKIT_BASE)/src/bora/vmkernel/include/vmkapi/v2_6_0_0

include $(HEXDK_BASE)/samples/common/userworld-tool.inc

# Only need to evaluate once (aka use ":=").
CURRENT_DIR := $(shell pwd)
BUILD_DIR := build
SCRATCH_DIR := $(BUILD_DIR)/scratch
VIB_DIR := $(BUILD_DIR)/vib
BUNDLE_DIR := $(BUILD_DIR)/component
STAGE_DIR := $(BUILD_DIR)/payloads/$(DESC_PAYLOAD_NAME)
TARGET_XML_DIR := /usr/lib/vmware/esxcli/ext

VIB_DESCRIPTOR_XML := $(SCRATCH_DIR)/descriptor.xml
VIB_BULLETIN_XML := $(SCRATCH_DIR)/bulletin.xml

# Need to evaluate at every reference, as DEV_OBJDIR, etc, can change
# during a build (aka use "=").  Also, some things get set/reset in
# common included files, we reference them, and we haven't included the files
# yet.
BINARIES_DIR = $(BUILD_DIR)/$(DEV_OBJDIR)
LINKED_UWTOOL = $(BINARIES_DIR)/$(UWTOOL)
INSTALL_DIR = $(TARGET_PREFIX)/bin
UWTOOL_DIR = $(STAGE_DIR)/$(INSTALL_DIR)
STAGE_XML_DIR = $(STAGE_DIR)$(TARGET_XML_DIR)
VIB_BULLETIN_ID = $(BULL_VENDOR_CODE)-esx-$(DESC_ESX_VERSION)-$(UWTOOL)-$(UWTOOL_VERSION)

VMW_EXTRA_DEFS += -I$(DEV_COMMON_DIR) \
	-DVMK_DEVKIT_HAS_API_VMKAPI_BASE \
	-DVMK_DEVKIT_USES_PUBLIC_APIS \
	-DVMK_DEVKIT_USES_BINARY_COMPATIBLE_APIS \
	-I$(AUTOSIG_DIR)

VPATH += :$(abspath $(DEV_COMMON_DIR))
ifdef AUTOSIGGEN_DEFS
UWTOOL_SOURCES += signature_definition.c
VPATH += :$(abspath $(AUTOSIG_DIR))
VPATH += :$(abspath $(COMMON_MGMT_INFRASTRUCTURE_DIR))
endif

.PHONY: clean

all: binaries vib
all-workbench: binaries xml-checks package
vib: build-dirs minimal-descriptor fill-bulletin xml-checks package

binary binaries: $(LINKED_UWTOOL)
vib-binary vib-binaries: INCLUDE_XML=no
vib-binary vib-binaries: vib

package:
	$(RM) -rf $(STAGE_DIR)
	$(MKDIR) -p $(UWTOOL_DIR)
	$(MKDIR) -p $(STAGE_XML_DIR)
	$(CP) $(LINKED_UWTOOL) $(UWTOOL_DIR)/$(UWTOOL)
	$(CP) $(PLUGIN_XML) $(STAGE_XML_DIR)/$(DESC_VENDOR)-$(PLUGIN_XML)
	$(MAKE) -f Makefile vib-bundle
# Note that the resulting UWTOOL is not stripped.
$(LINKED_UWTOOL): build-dirs $(DEV_$(DEV_OBJDIR)_OBJECTS)
	$(LINK_CMD)

$(BINARIES_DIR)/%.o: %.c
	$(MKDIR) -p $(dir $@)
	$(CHMOD) a+rwx $(dir $@)
	$(CC_CMD)

build-dirs:
	$(MKDIR) -p $(BUILD_DIR) $(SCRATCH_DIR) $(STAGE_DIR) $(VIB_DIR) \
	   $(BINARIES_DIR)

clean:
	$(RM) -rf $(BUILD_DIR) $(SCRATCH_DIR) $(STAGE_DIR) $(VIB_DIR) core \
	   $(BINARIES_DIR) $(AUTOSIG_DIR)
