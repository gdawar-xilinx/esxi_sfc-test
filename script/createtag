#!/bin/bash -eu
#############

# This script currently:
# - version bumps in sfvmk.sc
# - tags esxi_sfc
# - commit and push changes


p=$(basename "$0")
args="$@"

err  () { echo "$*" 1>&2; }
msg () { echo 1>&2 "$p: $*"; }
vmsg () { if ${verbose}; then echo "$p: $*"; fi; }
log  () { err "$p: $*"; }
fail () { log "$@"; exit 1; }

# Usage
usage () {
    err "Usage: createtag <sfvmk branch> <desired new tag> <firmware family> <v5 branch> [<new v5 tag>]"
    err "  Create tag on esxi_sfc and common code repo for sfvmk driver"
    err
    err "  --sfvmk_branch="
    err
    err "    The branch can be either 'default' 'sfvmk_dev_x'."
    err
    err "  --sfvmk_tag="
    err
    err "    The tag can be in the form of the following:"
    err "      v1.1.m.bbbb"
    err "    Note that createtag will check that this tag does not already exist"
    err
    err "  --fwfamily="
    err "    The firmware family version, i.e."
    err
    err "    --fwfamily=v7_1_1_1000-internal"
    err
    err "  --v5_branch="
    err
    err "    The v5 branch name can be either 'default' or 'BRANCH_NAME'."
    err
    err "  --v5_tag="
    err
    err "    New tag for v5 repo, this could be optional"
    err "    v4.13.1.xxxx"
    err
    err "    ./scripts/createtag --sfvmk_branch=sfvmk_dev_p2 --sfvmk_tag=v1.0.0.1 --v5_branch=deafult"
    err "      --fwfamily=v7_1_1_1000-internal"
    err
    err "    ./scripts/createtag --sfvmk_branch=sfvmk_dev_p2 --sfvmk_tag=v1.0.0.2"
    err "     --v5_branch=v4_13_1_sfvmk --v5_tag=v4.13.1.1002 --fwfamily=v7_1_1_1000-internal"
    exit 1
}
[ $# = 4 ] || [ $# = 5 ] ||usage

sfvmk_repo="esxi_sfc"
prompt=true
changes_pushed=false
commoncode_repo=v5
distfiles_repo=distfiles
winutils_repo=winutils
host_name="rpm-test1"
current_host=$(hostname)
TOP_DIR=$(pwd)

# Functions
strstr() {
  [ "${1#*$2*}" = "$1" ] && return 1
  return 0
}

checkRequiredArgs() {
    [ "${sfvmk_branch}" != "" ] || \
        fail "Please check -- arguments Must specify --sfvmk_branch"
    [ "${sfvmk_tag}" != "" ] || \
        fail "Please check -- arguments Must specify --sfvmk_tag"
    [ "${v5_branch}" != "" ] || \
        fail "Please check -- arguments Must specify --v5_branch"
    [ "${fwfamily}" != "" ] || \
        fail "Please check -- arguments Must specify --fwfamily"
    if [ "${v5_tag}" == "" ]; then
        echo
        echo "*** v5 tag is not provided, continue without v5 tag ***"
        read -p "Press enter to proceed ..."
        echo "Thanks, proceeding ..."
    fi
}

tinderBoxCheck() {
    if $prompt; then
        # Manual check for now
        echo
        echo "*** Please consult http://tinderbox/ to check that the current tree builds (to avoid bad tags) ***"
        read -p "Press enter to proceed ..."
        echo "Thanks, proceeding ..."
    fi
}

sanityChecks () {
    # check for rpm-test1 host
    strstr ${current_host} ${host_name} && echo current host is rpm_test1 || \
    fail "current host is ${current_host} required host is ${host_name}"

    # Check no local changes
    lines=$(hg --noninteractive status | wc -l)
    [ "${lines}" = 0 ] || fail "Repo ${sfvmk_repo} has local changes. Aborting"

    # Check no outgoing commits
    hg --noninteractive outgoing | egrep '^no changes found' > /dev/null || \
    fail "Repo ${sfvmk_repo} has outgoing changes"

    # Check no applied mqueue patches - without needing mqueue extension
    hg --noninteractive tags | grep qparent && \
    fail "Repo ${sfvmk_repo} has mqueue patches applied. Aborting" || true
}

pullSfvmkRepo () {
    hg --noninteractive pull

    # We assume that newbranch already exists
    # This will leave esxi_sfc/build
    log "Updating '${sfvmk_repo}' to branch '${sfvmk_branch}'"
    hg --noninteractive update --clean ${sfvmk_branch}
}

checktagexists() {
     echo "Checking Existing tags"
     hg log -r "$sfvmk_tag" >/dev/null 2>&1
}

checkSfvmkLastTag() {
     checktagexists  && \
         fail "Error: $sfvmk_tag already exist !!!"

     echo " Tag $sfvmk_tag does not exist in the repo : $sfvmk_repo"
}

# Update the sfvmk.sc file with new version number
versionUpdate () {
    echo "updating ${sfvmk_repo} repo to ${sfvmk_tag}"

    file=$(pwd)/native_drv/sfvmk.sc
    ver=$sfvmk_tag
    echo "sfvmk_tag: $sfvmk_tag, ver : $ver"
    ver=${ver:1}
    ver="\"${ver}\""
    sed -i 's/\(driver_ver     = \)\(.*\)$/\1'${ver}'/' $file
}

# Update the buildtype in the Makefile to ${buildtype}
buildtypeupdate () {
    echo "updating BUILDTYPE as ${buildtype}"

    file=$(pwd)/native_drv/Makefile
    sed -i 's/\(BUILDTYPE     = \)\(.*\)$/\1'${buildtype}'/' $file
}

# Update the live-install/remove params in the sfvmk.sc file
liveVibParamUpdate () {
    if [ "$buildtype" = "beta" ]; then
      livevibupdate="True"
    else
      livevibupdate="False"
    fi

    echo "updating live-install/remove params as ${livevibupdate} for ${buildtype} build"

    file=$(pwd)/native_drv/sfvmk.sc
    sed -i 's/\(\"live-install-allowed\"\t: \)\(.*\)$/\1'${livevibupdate},'/' $file
    sed -i 's/\(\"live-remove-allowed\"\t: \)\(.*\)$/\1'${livevibupdate},'/' $file
}

# Update the V5_TAG params in the Makefile file
updateV5Target () {
    file=$(pwd)/native_drv/Makefile

    echo "updating v5 target params for ${buildtype} build"

    if [ "$buildtype" = "beta" ]; then
      sed -i 's/\(V5_BRANCH\ *\=\ \)\(.*\)$/\1'${v5_branch}'/' $file
    else
      if [ "${v5_tag}" != "" ]; then
        sed -i 's/\(V5_TAG\ *\=\ \)\(.*\)$/\1'${v5_tag}'/' $file
      fi
    fi
}

pullV5Repo () {
    echo "cloning ${commoncode_repo} repository"
    hg --noninteractive --cwd ${TOP_DIR} clone /project/hg/incoming/${commoncode_repo}
    cd ${commoncode_repo} ; hg --noninteractive update -C ${v5_branch} ; cd ${TOP_DIR}

    #Required by mmaketag script
    echo "cloning ${distfiles_repo} repository"
    hg --noninteractive --cwd ${TOP_DIR} clone /project/hg/incoming/${distfiles_repo}

    #Required by mmaketag script
    echo "cloning ${winutils_repo} repository"
    hg --noninteractive --cwd ${TOP_DIR} clone /project/hg/incoming/${winutils_repo}
}

createV5Tag () {
    cd ${commoncode_repo}/scripts ; export PATH=${PATH}:$(pwd) ; cd ..
    echo "Add v5 tag ${v5_tag} for branch ${v5_branch}"
    sh scripts/mmaketag --tagfor=vmware --firmwarefamily_tag ${fwfamily} custom ${v5_tag}
    cd ${TOP_DIR}
}

removeV5Repo () {
    echo "removing ${commoncode_repo} repository"
    rm -rf ${TOP_DIR}/${commoncode_repo}

    echo "removing ${distfiles_repo} repository"
    rm -rf ${TOP_DIR}/${distfiles_repo}

    echo "removing ${winutils_repo} repository"
    rm -rf ${TOP_DIR}/${winutils_repo}
}

handleV5NoTag () {

    file=${TOP_DIR}/native_drv/Makefile
    existing_tag=$(grep '\(V5_TAG\ *\=\)' $file | awk '{print $3}')

    cd ${commoncode_repo}
    last_tag=$(hg --noninteractive parent | egrep summary: | tail -1)

    if [[ $last_tag == *$existing_tag* ]]; then
       echo "No changes after the last v5 tag. Continuing ...";
    else
       echo "There have been code commits after the last v5 tag.";
       read -p 'Do you want to continue without tagging the latest changes? (Y/ Yes/ N / No): ' user_input
       if [[ $user_input == *y*  ]] || [[ $user_input == *Y*  ]]; then
         echo "Continuing without tagging v5"
       else
         removeV5Repo
         fail "exit"
       fi
    fi

    cd ${TOP_DIR}
}

# Return true (via $?) if the working directory contains local changes
checkworkingdir () {
    local sfvmk_repo lines
    sfvmk_repo="$1"
    lines="$(hg --noninteractive status | wc -l)"
    test ${lines} -gt 0
}

commitVersion () {
    echo "repo ${sfvmk_repo} commit version ${sfvmk_tag}"
    if checkworkingdir ${sfvmk_repo}; then
        hg --noninteractive addremove
        hg --noninteractive commit --message "Task 71858 : Update version numbers to ${sfvmk_tag}"
    fi

    # fail gracefully when it's a no-op, like hg commit already does
    echo "repo ${sfvmk_repo} sfvmk_tag ${sfvmk_tag}"
    if [ -z "$(hg --noninteractive tags | grep ${sfvmk_tag})" ]; then
        hg --noninteractive tag ${sfvmk_tag}
    fi
}


sfvmkHgPush () {
    local sfvmk_repo="$1" rev

    msg "push back ${sfvmk_repo} changes"

    hg --noninteractive push || true
}

makeTag () {
    commitVersion

    local answer=""
    until [ "$answer" = "y" -o "$answer" = "n" ]; do
        echo "You can explore the changes with 'hg outgoing -p'"
        echo "You can request a test of these changes here http://tinderbox/request"
        read -p "Do you want to push the above tag ${sfvmk_tag} (y/n)" answer
    done
    if [ "$answer" = "y" ]; then
           sfvmkHgPush ${sfvmk_repo}
       changes_pushed=true
       msg "Changes have been pushed. Tag ${sfvmk_tag} was created."
    else
       fail "Please hg strip the outgoing commits from your repo"
    fi
}

tagV5Repo () {
    pullV5Repo
    if [ "${v5_tag}" == "" ]; then
       handleV5NoTag
    else
       createV5Tag
    fi
    removeV5Repo
}

bumpVersion () {
    sfvmk_tag=$(echo $sfvmk_tag |awk -F. -v OFS=. 'NF==1{print ++$NF}; \
                {$NF=sprintf("%0*d", length($NF), ($NF+1)); print}')
}

addSfvmkTag () {
    echo -e "\n\n Creating tag : $sfvmk_tag on branch $sfvmk_branch for $buildtype build"
    versionUpdate
    buildtypeupdate
    updateV5Target
    liveVibParamUpdate
    makeTag
}

updateAndTagSfvmk () {
    buildtype='release'
    addSfvmkTag

    bumpVersion

    buildtype='beta'
    addSfvmkTag
}

sfvmk_branch=
sfvmk_tag=
v5_branch=
v5_tag=
fwfamily=
buildtype=

while [ $# -gt 0 ]; do
    case "$1" in
        --sfvmk_branch=*)
            sfvmk_branch=${1:15}
            ;;
        --sfvmk_branch)
            sfvmk_branch=$2
            shift
            ;;
        --sfvmk_tag=*)
            sfvmk_tag=${1:12}
            ;;
        --sfvmk_tag)
            sfvmk_tag=$2
            shift
            ;;
        --v5_branch=*)
            v5_branch=${1:12}
            ;;
        --v5_branch)
            v5_branch=$2
            shift
            ;;
        --v5_tag=*)
            v5_tag=${1:9}
            ;;
        --v5_tag)
            sfvmk_tag=$2
            shift
            ;;
        --fwfamily=*)
            fwfamily=${1:11}
            ;;
        --fwfamily)
            fwfamily=$2
            shift
            ;;
        -*)
            usage
            ;;
         *)
            break
            ;;
   esac
   shift
done

# Invoke Functions to create v5 and sfvmk tags
checkRequiredArgs
tinderBoxCheck
sanityChecks
pullSfvmkRepo
checkSfvmkLastTag

# Create v5 Tag
tagV5Repo

# Create sfvmks Tags
updateAndTagSfvmk

${changes_pushed} && log "Please update the correct !TEST! entry with details"
